// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CmdbClient is the client API for Cmdb service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CmdbClient interface {
	AuthPw(ctx context.Context, in *ReqAuthPassword, opts ...grpc.CallOption) (*User, error)
	AuthPk(ctx context.Context, in *ReqAuthPublicKey, opts ...grpc.CallOption) (*User, error)
	AuthKb(ctx context.Context, in *ReqSshUser, opts ...grpc.CallOption) (*UserKb, error)
	FetchAsset(ctx context.Context, in *ReqAssetsQuery, opts ...grpc.CallOption) (*AssetList, error)
	FetchAssetSshConfig(ctx context.Context, in *ReqAssetUser, opts ...grpc.CallOption) (*AssetSshAccount, error)
	SshShellExec(ctx context.Context, in *ReqSshExec, opts ...grpc.CallOption) (*ResStatus, error)
	WebXtermSsh(ctx context.Context, in *ReqWebXterm, opts ...grpc.CallOption) (*ResWebXterm, error)
	WebXtermPod(ctx context.Context, in *ReqWebXterm, opts ...grpc.CallOption) (*ResWebXterm, error)
	CollectSshdLog(ctx context.Context, in *ReqSshdData, opts ...grpc.CallOption) (*ResStatus, error)
	PushSshCmd(ctx context.Context, in *ReqSshCmd, opts ...grpc.CallOption) (*ResStatus, error)
	PushAuthLog(ctx context.Context, in *ReqAuthLog, opts ...grpc.CallOption) (*ResStatus, error)
}

type cmdbClient struct {
	cc grpc.ClientConnInterface
}

func NewCmdbClient(cc grpc.ClientConnInterface) CmdbClient {
	return &cmdbClient{cc}
}

func (c *cmdbClient) AuthPw(ctx context.Context, in *ReqAuthPassword, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/bytegang.Cmdb/AuthPw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdbClient) AuthPk(ctx context.Context, in *ReqAuthPublicKey, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/bytegang.Cmdb/AuthPk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdbClient) AuthKb(ctx context.Context, in *ReqSshUser, opts ...grpc.CallOption) (*UserKb, error) {
	out := new(UserKb)
	err := c.cc.Invoke(ctx, "/bytegang.Cmdb/AuthKb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdbClient) FetchAsset(ctx context.Context, in *ReqAssetsQuery, opts ...grpc.CallOption) (*AssetList, error) {
	out := new(AssetList)
	err := c.cc.Invoke(ctx, "/bytegang.Cmdb/FetchAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdbClient) FetchAssetSshConfig(ctx context.Context, in *ReqAssetUser, opts ...grpc.CallOption) (*AssetSshAccount, error) {
	out := new(AssetSshAccount)
	err := c.cc.Invoke(ctx, "/bytegang.Cmdb/FetchAssetSshConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdbClient) SshShellExec(ctx context.Context, in *ReqSshExec, opts ...grpc.CallOption) (*ResStatus, error) {
	out := new(ResStatus)
	err := c.cc.Invoke(ctx, "/bytegang.Cmdb/SshShellExec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdbClient) WebXtermSsh(ctx context.Context, in *ReqWebXterm, opts ...grpc.CallOption) (*ResWebXterm, error) {
	out := new(ResWebXterm)
	err := c.cc.Invoke(ctx, "/bytegang.Cmdb/WebXtermSsh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdbClient) WebXtermPod(ctx context.Context, in *ReqWebXterm, opts ...grpc.CallOption) (*ResWebXterm, error) {
	out := new(ResWebXterm)
	err := c.cc.Invoke(ctx, "/bytegang.Cmdb/WebXtermPod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdbClient) CollectSshdLog(ctx context.Context, in *ReqSshdData, opts ...grpc.CallOption) (*ResStatus, error) {
	out := new(ResStatus)
	err := c.cc.Invoke(ctx, "/bytegang.Cmdb/CollectSshdLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdbClient) PushSshCmd(ctx context.Context, in *ReqSshCmd, opts ...grpc.CallOption) (*ResStatus, error) {
	out := new(ResStatus)
	err := c.cc.Invoke(ctx, "/bytegang.Cmdb/PushSshCmd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdbClient) PushAuthLog(ctx context.Context, in *ReqAuthLog, opts ...grpc.CallOption) (*ResStatus, error) {
	out := new(ResStatus)
	err := c.cc.Invoke(ctx, "/bytegang.Cmdb/PushAuthLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CmdbServer is the server API for Cmdb service.
// All implementations must embed UnimplementedCmdbServer
// for forward compatibility
type CmdbServer interface {
	AuthPw(context.Context, *ReqAuthPassword) (*User, error)
	AuthPk(context.Context, *ReqAuthPublicKey) (*User, error)
	AuthKb(context.Context, *ReqSshUser) (*UserKb, error)
	FetchAsset(context.Context, *ReqAssetsQuery) (*AssetList, error)
	FetchAssetSshConfig(context.Context, *ReqAssetUser) (*AssetSshAccount, error)
	SshShellExec(context.Context, *ReqSshExec) (*ResStatus, error)
	WebXtermSsh(context.Context, *ReqWebXterm) (*ResWebXterm, error)
	WebXtermPod(context.Context, *ReqWebXterm) (*ResWebXterm, error)
	CollectSshdLog(context.Context, *ReqSshdData) (*ResStatus, error)
	PushSshCmd(context.Context, *ReqSshCmd) (*ResStatus, error)
	PushAuthLog(context.Context, *ReqAuthLog) (*ResStatus, error)
	mustEmbedUnimplementedCmdbServer()
}

// UnimplementedCmdbServer must be embedded to have forward compatible implementations.
type UnimplementedCmdbServer struct {
}

func (UnimplementedCmdbServer) AuthPw(context.Context, *ReqAuthPassword) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthPw not implemented")
}
func (UnimplementedCmdbServer) AuthPk(context.Context, *ReqAuthPublicKey) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthPk not implemented")
}
func (UnimplementedCmdbServer) AuthKb(context.Context, *ReqSshUser) (*UserKb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthKb not implemented")
}
func (UnimplementedCmdbServer) FetchAsset(context.Context, *ReqAssetsQuery) (*AssetList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAsset not implemented")
}
func (UnimplementedCmdbServer) FetchAssetSshConfig(context.Context, *ReqAssetUser) (*AssetSshAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAssetSshConfig not implemented")
}
func (UnimplementedCmdbServer) SshShellExec(context.Context, *ReqSshExec) (*ResStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SshShellExec not implemented")
}
func (UnimplementedCmdbServer) WebXtermSsh(context.Context, *ReqWebXterm) (*ResWebXterm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebXtermSsh not implemented")
}
func (UnimplementedCmdbServer) WebXtermPod(context.Context, *ReqWebXterm) (*ResWebXterm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebXtermPod not implemented")
}
func (UnimplementedCmdbServer) CollectSshdLog(context.Context, *ReqSshdData) (*ResStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectSshdLog not implemented")
}
func (UnimplementedCmdbServer) PushSshCmd(context.Context, *ReqSshCmd) (*ResStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushSshCmd not implemented")
}
func (UnimplementedCmdbServer) PushAuthLog(context.Context, *ReqAuthLog) (*ResStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushAuthLog not implemented")
}
func (UnimplementedCmdbServer) mustEmbedUnimplementedCmdbServer() {}

// UnsafeCmdbServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CmdbServer will
// result in compilation errors.
type UnsafeCmdbServer interface {
	mustEmbedUnimplementedCmdbServer()
}

func RegisterCmdbServer(s grpc.ServiceRegistrar, srv CmdbServer) {
	s.RegisterService(&Cmdb_ServiceDesc, srv)
}

func _Cmdb_AuthPw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAuthPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdbServer).AuthPw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bytegang.Cmdb/AuthPw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdbServer).AuthPw(ctx, req.(*ReqAuthPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmdb_AuthPk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAuthPublicKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdbServer).AuthPk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bytegang.Cmdb/AuthPk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdbServer).AuthPk(ctx, req.(*ReqAuthPublicKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmdb_AuthKb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSshUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdbServer).AuthKb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bytegang.Cmdb/AuthKb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdbServer).AuthKb(ctx, req.(*ReqSshUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmdb_FetchAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAssetsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdbServer).FetchAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bytegang.Cmdb/FetchAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdbServer).FetchAsset(ctx, req.(*ReqAssetsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmdb_FetchAssetSshConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAssetUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdbServer).FetchAssetSshConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bytegang.Cmdb/FetchAssetSshConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdbServer).FetchAssetSshConfig(ctx, req.(*ReqAssetUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmdb_SshShellExec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSshExec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdbServer).SshShellExec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bytegang.Cmdb/SshShellExec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdbServer).SshShellExec(ctx, req.(*ReqSshExec))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmdb_WebXtermSsh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWebXterm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdbServer).WebXtermSsh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bytegang.Cmdb/WebXtermSsh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdbServer).WebXtermSsh(ctx, req.(*ReqWebXterm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmdb_WebXtermPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWebXterm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdbServer).WebXtermPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bytegang.Cmdb/WebXtermPod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdbServer).WebXtermPod(ctx, req.(*ReqWebXterm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmdb_CollectSshdLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSshdData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdbServer).CollectSshdLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bytegang.Cmdb/CollectSshdLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdbServer).CollectSshdLog(ctx, req.(*ReqSshdData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmdb_PushSshCmd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSshCmd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdbServer).PushSshCmd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bytegang.Cmdb/PushSshCmd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdbServer).PushSshCmd(ctx, req.(*ReqSshCmd))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmdb_PushAuthLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAuthLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdbServer).PushAuthLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bytegang.Cmdb/PushAuthLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdbServer).PushAuthLog(ctx, req.(*ReqAuthLog))
	}
	return interceptor(ctx, in, info, handler)
}

// Cmdb_ServiceDesc is the grpc.ServiceDesc for Cmdb service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cmdb_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bytegang.Cmdb",
	HandlerType: (*CmdbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthPw",
			Handler:    _Cmdb_AuthPw_Handler,
		},
		{
			MethodName: "AuthPk",
			Handler:    _Cmdb_AuthPk_Handler,
		},
		{
			MethodName: "AuthKb",
			Handler:    _Cmdb_AuthKb_Handler,
		},
		{
			MethodName: "FetchAsset",
			Handler:    _Cmdb_FetchAsset_Handler,
		},
		{
			MethodName: "FetchAssetSshConfig",
			Handler:    _Cmdb_FetchAssetSshConfig_Handler,
		},
		{
			MethodName: "SshShellExec",
			Handler:    _Cmdb_SshShellExec_Handler,
		},
		{
			MethodName: "WebXtermSsh",
			Handler:    _Cmdb_WebXtermSsh_Handler,
		},
		{
			MethodName: "WebXtermPod",
			Handler:    _Cmdb_WebXtermPod_Handler,
		},
		{
			MethodName: "CollectSshdLog",
			Handler:    _Cmdb_CollectSshdLog_Handler,
		},
		{
			MethodName: "PushSshCmd",
			Handler:    _Cmdb_PushSshCmd_Handler,
		},
		{
			MethodName: "PushAuthLog",
			Handler:    _Cmdb_PushAuthLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bastion.proto",
}

// SshArkClient is the client API for SshArk service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SshArkClient interface {
	ExecShell(ctx context.Context, in *ReqShellExec, opts ...grpc.CallOption) (*ResShellExec, error)
}

type sshArkClient struct {
	cc grpc.ClientConnInterface
}

func NewSshArkClient(cc grpc.ClientConnInterface) SshArkClient {
	return &sshArkClient{cc}
}

func (c *sshArkClient) ExecShell(ctx context.Context, in *ReqShellExec, opts ...grpc.CallOption) (*ResShellExec, error) {
	out := new(ResShellExec)
	err := c.cc.Invoke(ctx, "/bytegang.SshArk/execShell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SshArkServer is the server API for SshArk service.
// All implementations must embed UnimplementedSshArkServer
// for forward compatibility
type SshArkServer interface {
	ExecShell(context.Context, *ReqShellExec) (*ResShellExec, error)
	mustEmbedUnimplementedSshArkServer()
}

// UnimplementedSshArkServer must be embedded to have forward compatible implementations.
type UnimplementedSshArkServer struct {
}

func (UnimplementedSshArkServer) ExecShell(context.Context, *ReqShellExec) (*ResShellExec, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecShell not implemented")
}
func (UnimplementedSshArkServer) mustEmbedUnimplementedSshArkServer() {}

// UnsafeSshArkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SshArkServer will
// result in compilation errors.
type UnsafeSshArkServer interface {
	mustEmbedUnimplementedSshArkServer()
}

func RegisterSshArkServer(s grpc.ServiceRegistrar, srv SshArkServer) {
	s.RegisterService(&SshArk_ServiceDesc, srv)
}

func _SshArk_ExecShell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqShellExec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SshArkServer).ExecShell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bytegang.SshArk/execShell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SshArkServer).ExecShell(ctx, req.(*ReqShellExec))
	}
	return interceptor(ctx, in, info, handler)
}

// SshArk_ServiceDesc is the grpc.ServiceDesc for SshArk service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SshArk_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bytegang.SshArk",
	HandlerType: (*SshArkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "execShell",
			Handler:    _SshArk_ExecShell_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bastion.proto",
}
