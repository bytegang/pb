// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ByteGangsterClient is the client API for ByteGangster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ByteGangsterClient interface {
	AuthPw(ctx context.Context, in *ReqAuthPassword, opts ...grpc.CallOption) (*User, error)
	AuthPk(ctx context.Context, in *ReqAuthPublicKey, opts ...grpc.CallOption) (*User, error)
	AuthKb(ctx context.Context, in *ReqSshUser, opts ...grpc.CallOption) (*UserKb, error)
	FetchAsset(ctx context.Context, in *ReqAssetsQuery, opts ...grpc.CallOption) (*AssetList, error)
	FetchAssetSshConfig(ctx context.Context, in *ReqAssetUser, opts ...grpc.CallOption) (*ResSshConnCfg, error)
	WebXtermSsh(ctx context.Context, in *ReqToken, opts ...grpc.CallOption) (*ResSshConnCfg, error)
	WebXtermPod(ctx context.Context, in *ReqToken, opts ...grpc.CallOption) (*ResSshConnCfg, error)
	Guacamole(ctx context.Context, in *ReqToken, opts ...grpc.CallOption) (*ResGuacamole, error)
	SaveLogSshSession(ctx context.Context, in *ReqSshdData, opts ...grpc.CallOption) (*ResStatus, error)
	SaveLogAuth(ctx context.Context, in *ReqAuthLog, opts ...grpc.CallOption) (*ResStatus, error)
}

type byteGangsterClient struct {
	cc grpc.ClientConnInterface
}

func NewByteGangsterClient(cc grpc.ClientConnInterface) ByteGangsterClient {
	return &byteGangsterClient{cc}
}

func (c *byteGangsterClient) AuthPw(ctx context.Context, in *ReqAuthPassword, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/ByteGangster.ByteGangster/AuthPw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *byteGangsterClient) AuthPk(ctx context.Context, in *ReqAuthPublicKey, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/ByteGangster.ByteGangster/AuthPk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *byteGangsterClient) AuthKb(ctx context.Context, in *ReqSshUser, opts ...grpc.CallOption) (*UserKb, error) {
	out := new(UserKb)
	err := c.cc.Invoke(ctx, "/ByteGangster.ByteGangster/AuthKb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *byteGangsterClient) FetchAsset(ctx context.Context, in *ReqAssetsQuery, opts ...grpc.CallOption) (*AssetList, error) {
	out := new(AssetList)
	err := c.cc.Invoke(ctx, "/ByteGangster.ByteGangster/FetchAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *byteGangsterClient) FetchAssetSshConfig(ctx context.Context, in *ReqAssetUser, opts ...grpc.CallOption) (*ResSshConnCfg, error) {
	out := new(ResSshConnCfg)
	err := c.cc.Invoke(ctx, "/ByteGangster.ByteGangster/FetchAssetSshConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *byteGangsterClient) WebXtermSsh(ctx context.Context, in *ReqToken, opts ...grpc.CallOption) (*ResSshConnCfg, error) {
	out := new(ResSshConnCfg)
	err := c.cc.Invoke(ctx, "/ByteGangster.ByteGangster/WebXtermSsh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *byteGangsterClient) WebXtermPod(ctx context.Context, in *ReqToken, opts ...grpc.CallOption) (*ResSshConnCfg, error) {
	out := new(ResSshConnCfg)
	err := c.cc.Invoke(ctx, "/ByteGangster.ByteGangster/WebXtermPod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *byteGangsterClient) Guacamole(ctx context.Context, in *ReqToken, opts ...grpc.CallOption) (*ResGuacamole, error) {
	out := new(ResGuacamole)
	err := c.cc.Invoke(ctx, "/ByteGangster.ByteGangster/Guacamole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *byteGangsterClient) SaveLogSshSession(ctx context.Context, in *ReqSshdData, opts ...grpc.CallOption) (*ResStatus, error) {
	out := new(ResStatus)
	err := c.cc.Invoke(ctx, "/ByteGangster.ByteGangster/SaveLogSshSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *byteGangsterClient) SaveLogAuth(ctx context.Context, in *ReqAuthLog, opts ...grpc.CallOption) (*ResStatus, error) {
	out := new(ResStatus)
	err := c.cc.Invoke(ctx, "/ByteGangster.ByteGangster/SaveLogAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ByteGangsterServer is the server API for ByteGangster service.
// All implementations must embed UnimplementedByteGangsterServer
// for forward compatibility
type ByteGangsterServer interface {
	AuthPw(context.Context, *ReqAuthPassword) (*User, error)
	AuthPk(context.Context, *ReqAuthPublicKey) (*User, error)
	AuthKb(context.Context, *ReqSshUser) (*UserKb, error)
	FetchAsset(context.Context, *ReqAssetsQuery) (*AssetList, error)
	FetchAssetSshConfig(context.Context, *ReqAssetUser) (*ResSshConnCfg, error)
	WebXtermSsh(context.Context, *ReqToken) (*ResSshConnCfg, error)
	WebXtermPod(context.Context, *ReqToken) (*ResSshConnCfg, error)
	Guacamole(context.Context, *ReqToken) (*ResGuacamole, error)
	SaveLogSshSession(context.Context, *ReqSshdData) (*ResStatus, error)
	SaveLogAuth(context.Context, *ReqAuthLog) (*ResStatus, error)
	mustEmbedUnimplementedByteGangsterServer()
}

// UnimplementedByteGangsterServer must be embedded to have forward compatible implementations.
type UnimplementedByteGangsterServer struct {
}

func (UnimplementedByteGangsterServer) AuthPw(context.Context, *ReqAuthPassword) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthPw not implemented")
}
func (UnimplementedByteGangsterServer) AuthPk(context.Context, *ReqAuthPublicKey) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthPk not implemented")
}
func (UnimplementedByteGangsterServer) AuthKb(context.Context, *ReqSshUser) (*UserKb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthKb not implemented")
}
func (UnimplementedByteGangsterServer) FetchAsset(context.Context, *ReqAssetsQuery) (*AssetList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAsset not implemented")
}
func (UnimplementedByteGangsterServer) FetchAssetSshConfig(context.Context, *ReqAssetUser) (*ResSshConnCfg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAssetSshConfig not implemented")
}
func (UnimplementedByteGangsterServer) WebXtermSsh(context.Context, *ReqToken) (*ResSshConnCfg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebXtermSsh not implemented")
}
func (UnimplementedByteGangsterServer) WebXtermPod(context.Context, *ReqToken) (*ResSshConnCfg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebXtermPod not implemented")
}
func (UnimplementedByteGangsterServer) Guacamole(context.Context, *ReqToken) (*ResGuacamole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Guacamole not implemented")
}
func (UnimplementedByteGangsterServer) SaveLogSshSession(context.Context, *ReqSshdData) (*ResStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveLogSshSession not implemented")
}
func (UnimplementedByteGangsterServer) SaveLogAuth(context.Context, *ReqAuthLog) (*ResStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveLogAuth not implemented")
}
func (UnimplementedByteGangsterServer) mustEmbedUnimplementedByteGangsterServer() {}

// UnsafeByteGangsterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ByteGangsterServer will
// result in compilation errors.
type UnsafeByteGangsterServer interface {
	mustEmbedUnimplementedByteGangsterServer()
}

func RegisterByteGangsterServer(s grpc.ServiceRegistrar, srv ByteGangsterServer) {
	s.RegisterService(&ByteGangster_ServiceDesc, srv)
}

func _ByteGangster_AuthPw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAuthPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ByteGangsterServer).AuthPw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ByteGangster.ByteGangster/AuthPw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ByteGangsterServer).AuthPw(ctx, req.(*ReqAuthPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _ByteGangster_AuthPk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAuthPublicKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ByteGangsterServer).AuthPk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ByteGangster.ByteGangster/AuthPk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ByteGangsterServer).AuthPk(ctx, req.(*ReqAuthPublicKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _ByteGangster_AuthKb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSshUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ByteGangsterServer).AuthKb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ByteGangster.ByteGangster/AuthKb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ByteGangsterServer).AuthKb(ctx, req.(*ReqSshUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _ByteGangster_FetchAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAssetsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ByteGangsterServer).FetchAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ByteGangster.ByteGangster/FetchAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ByteGangsterServer).FetchAsset(ctx, req.(*ReqAssetsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ByteGangster_FetchAssetSshConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAssetUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ByteGangsterServer).FetchAssetSshConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ByteGangster.ByteGangster/FetchAssetSshConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ByteGangsterServer).FetchAssetSshConfig(ctx, req.(*ReqAssetUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _ByteGangster_WebXtermSsh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ByteGangsterServer).WebXtermSsh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ByteGangster.ByteGangster/WebXtermSsh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ByteGangsterServer).WebXtermSsh(ctx, req.(*ReqToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _ByteGangster_WebXtermPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ByteGangsterServer).WebXtermPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ByteGangster.ByteGangster/WebXtermPod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ByteGangsterServer).WebXtermPod(ctx, req.(*ReqToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _ByteGangster_Guacamole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ByteGangsterServer).Guacamole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ByteGangster.ByteGangster/Guacamole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ByteGangsterServer).Guacamole(ctx, req.(*ReqToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _ByteGangster_SaveLogSshSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSshdData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ByteGangsterServer).SaveLogSshSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ByteGangster.ByteGangster/SaveLogSshSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ByteGangsterServer).SaveLogSshSession(ctx, req.(*ReqSshdData))
	}
	return interceptor(ctx, in, info, handler)
}

func _ByteGangster_SaveLogAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAuthLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ByteGangsterServer).SaveLogAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ByteGangster.ByteGangster/SaveLogAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ByteGangsterServer).SaveLogAuth(ctx, req.(*ReqAuthLog))
	}
	return interceptor(ctx, in, info, handler)
}

// ByteGangster_ServiceDesc is the grpc.ServiceDesc for ByteGangster service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ByteGangster_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ByteGangster.ByteGangster",
	HandlerType: (*ByteGangsterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthPw",
			Handler:    _ByteGangster_AuthPw_Handler,
		},
		{
			MethodName: "AuthPk",
			Handler:    _ByteGangster_AuthPk_Handler,
		},
		{
			MethodName: "AuthKb",
			Handler:    _ByteGangster_AuthKb_Handler,
		},
		{
			MethodName: "FetchAsset",
			Handler:    _ByteGangster_FetchAsset_Handler,
		},
		{
			MethodName: "FetchAssetSshConfig",
			Handler:    _ByteGangster_FetchAssetSshConfig_Handler,
		},
		{
			MethodName: "WebXtermSsh",
			Handler:    _ByteGangster_WebXtermSsh_Handler,
		},
		{
			MethodName: "WebXtermPod",
			Handler:    _ByteGangster_WebXtermPod_Handler,
		},
		{
			MethodName: "Guacamole",
			Handler:    _ByteGangster_Guacamole_Handler,
		},
		{
			MethodName: "SaveLogSshSession",
			Handler:    _ByteGangster_SaveLogSshSession_Handler,
		},
		{
			MethodName: "SaveLogAuth",
			Handler:    _ByteGangster_SaveLogAuth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bastion.proto",
}
